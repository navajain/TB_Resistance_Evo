# -*- coding: utf-8 -*-
"""TB_Profiler_Comparison

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14nHYz8CHput_M-8LdFnynkJ4Dlz53tX9

Code Written by George

The first four cells, through "!conda install -c bioconda tb-profiler" are derived from the installation instructions provided by the publishers of TB-Profiler, found at https://github.com/jodyphelan/TBProfiler
"""

# This code converts text files as generated by Benson Kung into fasta files for processing

import os

def txt_to_fasta(txt_folder, fasta_folder):
    os.makedirs(fasta_folder, exist_ok=True)
    for filename in os.listdir(txt_folder):
        if filename.endswith(".txt"):
            txt_path = os.path.join(txt_folder, filename)
            fasta_path = os.path.join(fasta_folder, filename.replace(".txt", ".fasta"))
            with open(txt_path, "r") as txt_file, open(fasta_path, "w") as fasta_file:
                sequence = txt_file.read().strip()
                fasta_header = f">{os.path.splitext(filename)[0]}"
                fasta_file.write(fasta_header + "\n")
                fasta_file.write(sequence + "\n")
if __name__ == "__main__":
    txt_folder = "/content/drive/MyDrive/BioE212/EVO/genomes/site_05/"
    fasta_folder = "/content/drive/MyDrive/BioE212Temp/BioE212Site5"
    txt_to_fasta(txt_folder, fasta_folder)

!pip install -q condacolab
import condacolab
condacolab.install()

import condacolab
condacolab.check()

!conda config --add channels defaults
!conda config --add channels bioconda
!conda config --add channels conda-forge

!conda install -c bioconda tb-profiler

from google.colab import drive
drive.mount('/content/drive/', force_remount=True)

# This takes the fastas previously generated and runs TB Profiler on them

import os
import subprocess
import shutil

def run_tpb_on_all_fastas(input_directory):
    os.makedirs('/content/drive/MyDrive/BioE212Temp/TBP_Results/', exist_ok=True)
    for filename in os.listdir(input_directory):
        if filename.endswith(".fasta"):
            input_filepath = os.path.join(input_directory, filename)
        command = f"tb-profiler profile -f {input_filepath} --call_whole_genome --csv"
        try:
            result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
            shutil.move('/content/results/tbprofiler.results.csv', os.path.join('/content/drive/MyDrive/BioE212Temp/TBP_Results/', f"result.{filename}.csv") )
        except subprocess.CalledProcessError as e:
            print(f"Error processing {input_filepath}:")


# Function call
input_directory = '/content/drive/MyDrive/BioE212Temp/BioE212Site5'
run_tpb_on_all_fastas(input_directory)

# This code extracts the calls made by TB Profiler and unifies it. Afterwards it compares the TBP resistance calls to calls from the model

import os
import pandas as pd
import csv

def extract_data_from_csvs(source_directory, output_directory, output_filename):
    os.makedirs(output_directory, exist_ok=True)
    output_file_path = os.path.join(output_directory, output_filename)
    with open(output_file_path, mode='w', newline='') as output_file:
        csv_writer = csv.writer(output_file)
        csv_writer.writerow(['Filename', 'Cell B', 'Cell C'])
        for filename in os.listdir(source_directory):
            if filename.endswith('.csv'):
                file_path = os.path.join(source_directory, filename)
                base_filename = os.path.splitext(filename)[0]
                base_filename = base_filename.replace('.fasta', '')
                    with open(file_path, mode='r') as input_file:
                        csv_reader = csv.reader(input_file)
                        for row in csv_reader:
                            if len(row) > 2 and row[0] == 'Rifampicin':
                                cell_B = row[1]
                                cell_C = row[2]
                                csv_writer.writerow([base_filename, cell_B, cell_C])
                                break
                except Exception as e:
                    print(f"An error occurred while processing {filename}: {e}")


def compare_phenotypes(output_csv_path, new_csv_path, result_csv_path):
    df_output = pd.read_csv(output_csv_path)
    df_new = pd.read_csv(new_csv_path)
    df_new_filtered = df_new
    mismatches = []
    for _, row in df_output.iterrows():
        filename = row['Filename']
        mod_call = row['Cell B']
        match = df_new_filtered[df_new_filtered['UNIQUEID'] == filename]
        if not match.empty:
            for _, match_row in match.iterrows():
                if match_row['RIF_BINARY_PHENOTYPE'] != mod_call:
                    mismatches.append([filename, mod_call, match_row['RIF_BINARY_PHENOTYPE'], match_row['REPORT']])
    df_mismatches = pd.DataFrame(mismatches, columns=['Filename', 'Cell B', 'RIF_BINARY_PHENOTYPE', 'REPORT'])
    df_mismatches.to_csv(result_csv_path, index=False)

# Directories
source_directory = '/content/drive/MyDrive/BioE212Temp/TBP_Results/'
output_directory = '/content/drive/MyDrive/BioE212Temp/TBP_Results_Summary/'
output_filename = 'TBP_summary.csv'
new_csv_path = '/content/drive/MyDrive/BioE212/model_predictions.csv'
result_csv_path = '/content/drive/MyDrive/BioE212Temp/TBP_Results_Summary/comparison.csv'

# Extract data from CSVs and generate the initial output file
extract_data_from_csvs(source_directory, output_directory, output_filename)
compare_phenotypes(os.path.join(output_directory, output_filename), new_csv_path, result_csv_path)

# This code performs a comparison of the TBP output and the model calls against the Cryptic Binary Rif Phenotypes

import pandas as pd

comparison_path = '/content/drive/MyDrive/BioE212Temp/TBP_Results_Summary/comparison.csv'
cryptic_path = '/content/drive/MyDrive/BioE212/UKMYC_PHENOTYPES_PKL.csv'

df_comparison = pd.read_csv(comparison_path)
df_cryptic = pd.read_csv(cryptic_path)

# Filter the Cryptic df for rifampicin entries
df_cryptic_rif = df_cryptic[df_cryptic['DRUG'] == 'RIF']

mismatches = []

# Iterate through each entry in the previously generated "comparison" df
for _, row in df_comparison.iterrows():
    filename = row['Filename']
    tbp_cell_b = row['TBP Cell B']
    model_rif_binary_phenotype = row['Model RIF_BINARY_PHENOTYPE']
    match = df_cryptic_rif[df_cryptic_rif['UNIQUEID'] == filename]

    if not match.empty:
        for _, match_row in match.iterrows():
            if match_row['BINARY_PHENOTYPE'] != tbp_cell_b:
                mismatches.append([filename, tbp_cell_b, model_rif_binary_phenotype, match_row['BINARY_PHENOTYPE']])

df_mismatches = pd.DataFrame(mismatches, columns=['Filename', 'TBP Cell B', 'Model RIF_BINARY_PHENOTYPE', 'Cryptic RIF_BINARY_PHENOTYPE'])
df_mismatches.to_csv('/content/drive/MyDrive/BioE212Temp/TBP_Results_Summary/mismatches_comparison_Cryptic.csv', index=False)

"""[Generative AI disclosures.](https://docs.google.com/document/d/11mCWk_nEEsyv7YSqWpBhWWwb3WaF458oXbtaLBfxIVQ/edit?usp=sharing)"""