# -*- coding: utf-8 -*-
"""Variant Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bCEopIwEFSvTLAdV823quoB8nLP64wqB

Code written by George
"""

from google.colab import drive
drive.mount('/content/drive/', force_remount=True)

# This code analyses frequently mutated genes in the cryptic dataset and determines which residues are most highly mutated within the top 20 most mutated genes

import pandas as pd

def merge_phenotype_genomes(phenotype, genomes):
    # Merge the dataframes on 'UNIQUEID'
    merged = pd.merge(phenotype, genomes_data[['UNIQUEID', 'REF', 'ALT', 'GENOME_INDEX']],
                      on='UNIQUEID', how='left')
    return merged

# Paths and function calls
genomes_data = pd.read_csv('/content/drive/MyDrive/BioE212/VARIANTS.csv')
phenotypes_data = pd.read_csv('/content/drive/MyDrive/BioE212/UKMYC_PHENOTYPES_PKL.csv')
phenotype_df = pd.DataFrame(phenotypes_data)
genomes_df = pd.DataFrame(genomes_data)
# Combinging
result_df = merge_phenotype_genomes(phenotype_df, genomes_df)
# Group by gene and frequency
gene_counts = genomes_data['GENE'].value_counts().reset_index()
gene_counts.columns = ['GENE', 'COUNT']
# Report for most mutated genes exported
gene_counts.to_csv('/content/drive/MyDrive/BioE212/gene_counts.csv', index=False)
top_20_genes = gene_counts.head(20)['GENE']
top_20_df = genomes_data[genomes_data['GENE'].isin(top_20_genes)]
# Determine residues most frequently mutated by gene
amino_acid_counts = top_20_df.groupby(['GENE', 'AMINO_ACID_NUMBER']).size().reset_index(name='FREQUENCY')
# Export report on most highly mutated residues for top 20 genes
amino_acid_counts.to_csv('/content/drive/MyDrive/BioE212/top_20_amino_acid_counts.csv', index=False)

# This generates binary vectors of samples based on variants detected in each sample and subsequently analyses these by single vector decomposition, labelling based on a number of criteria in this case site

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.decomposition import TruncatedSVD
from scipy.sparse import csr_matrix
from tqdm import tqdm

def create_binary_matrix(df):
    # Create a pivot table to get binary matrix
    binary_matrix = df.pivot_table(index='UNIQUEID', columns='VARIANT', aggfunc='size', fill_value=0)
    return binary_matrix

def perform_svd(sparse_matrix):
    svd = TruncatedSVD(n_components=2)
    svd_result = svd.fit_transform(sparse_matrix)
    svd_df = pd.DataFrame(svd_result, columns=['PC1', 'PC2'])
    return svd_df

def preprocess_uniqueid(uniqueid_series):
    # Extract the first two numeric characters from the UNIQUEID
    numeric_labels = uniqueid_series.str.extract(r'(\d{2})')[0].dropna().astype(int)
    return numeric_labels

def plot_svd(svd_df, labels_df):
    labels_df['Numeric_Label'] = preprocess_uniqueid(labels_df['UNIQUEID'])
    # Drop rows from labels_df that do not have corresponding SVD values
    labels_df = labels_df.dropna(subset=['Numeric_Label'])
    merged_df = pd.concat([svd_df, labels_df.reset_index(drop=True)], axis=1)
    plt.figure(figsize=(10, 6))
    scatter = plt.scatter(merged_df['PC1'], merged_df['PC2'], c=merged_df['Numeric_Label'], cmap='viridis', alpha=0.7)
    plt.colorbar(scatter, label='Numeric Label')
    plt.xlabel('Component 1')
    plt.ylabel('Component 2')
    plt.title('SVD of Binary Vectors Colored by Numeric Label from UNIQUEID')
    plt.grid(True)
    plt.show()

def main(variants_file_path, labels_file_path, k):
    # Read only the first k rows
    df = pd.read_csv(variants_file_path, nrows=k)
    labels_df = pd.read_csv(labels_file_path)

    binary_matrix = create_binary_matrix(df)

    # Convert to sparse matrix
    sparse_matrix = csr_matrix(binary_matrix.values)

    svd_df = perform_svd(sparse_matrix)
    plot_svd(svd_df, labels_df)

# Example usage
file_path = '/content/drive/MyDrive/BioE212/VARIANTS.csv' # Replace with the actual file path
labels_file_path = '/content/drive/MyDrive/BioE212/test/rif_labels.csv'        # Replace with the actual file path
k = 5000000  # Replace with the desired number of rows to load
main(file_path, labels_file_path, k)